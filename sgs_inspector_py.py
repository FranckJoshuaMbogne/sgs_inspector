# -*- coding: utf-8 -*-
"""sgs_inspector.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrqSCd5Qa48aLF_e_SfKfeeUg-TX4mFx
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import random

# Configuration
st.set_page_config(page_title="SGS Inspector Dashboard", layout="wide")

# --- Header ---
st.title("üìä Tableau de bord - Inspections SGS (Donn√©es simul√©es)")
st.markdown("Ce tableau de bord pr√©sente une visualisation fictive de l'activit√© d'inspection. Les donn√©es sont simul√©es √† des fins de d√©monstration.")

# --- G√©n√©ration de donn√©es fictives ---
@st.cache_data
def generate_data():
    random.seed(42)
    clients = ["Total", "Brasseries", "Sodecoton", "Sonara", "Dangote", "PMUC"]
    regions = ["Littoral", "Centre", "Nord", "Ouest", "Sud-Ouest"]
    secteurs = ["Agroalimentaire", "P√©trole", "Transport", "Pharma", "Construction"]

    data = []
    for _ in range(500):
        date = datetime.now() - timedelta(days=random.randint(1, 365))
        client = random.choice(clients)
        region = random.choice(regions)
        secteur = random.choice(secteurs)
        conformit√© = random.choices(["Conforme", "Non conforme"], weights=[0.8, 0.2])[0]
        dur√©e = round(random.uniform(1, 5), 2)
        data.append([date, client, r√©gion, secteur, conformit√©, dur√©e])

    df = pd.DataFrame(data, columns=["Date", "Client", "R√©gion", "Secteur", "Statut conformit√©", "Dur√©e (jours)"])
    df["Mois"] = df["Date"].dt.to_period("M").astype(str)
    return df

df = generate_data()

# --- Filtres ---
with st.sidebar:
    st.header("üéØ Filtres")
    region_filter = st.multiselect("R√©gion", options=df["R√©gion"].unique(), default=df["R√©gion"].unique())
    secteur_filter = st.multiselect("Secteur", options=df["Secteur"].unique(), default=df["Secteur"].unique())
    statut_filter = st.multiselect("Statut conformit√©", options=df["Statut conformit√©"].unique(), default=df["Statut conformit√©"].unique())

df_filtered = df[
    df["R√©gion"].isin(region_filter) &
    df["Secteur"].isin(secteur_filter) &
    df["Statut conformit√©"].isin(statut_filter)
]

# --- KPI ---
col1, col2, col3 = st.columns(3)
col1.metric("üì¶ Nombre d'inspections", len(df_filtered))
col2.metric("‚úÖ Taux de conformit√©", f"{(df_filtered['Statut conformit√©'].value_counts(normalize=True).get('Conforme', 0)*100):.1f}%")
col3.metric("‚è±Ô∏è Dur√©e moyenne (jours)", f"{df_filtered['Dur√©e (jours)'].mean():.2f}")

# --- Graphiques ---
st.subheader("üìà √âvolution mensuelle des inspections")
fig1 = px.histogram(df_filtered, x="Mois", color="Statut conformit√©", barmode="group",
                    title="Nombre d'inspections par mois")
st.plotly_chart(fig1, use_container_width=True)

st.subheader("üìç R√©partition par r√©gion")
fig2 = px.pie(df_filtered, names="R√©gion", title="Inspections par r√©gion")
st.plotly_chart(fig2, use_container_width=True)

st.subheader("üîç R√©partition par secteur")
fig3 = px.bar(df_filtered["Secteur"].value_counts().reset_index(),
              x="index", y="Secteur", title="Nombre d'inspections par secteur",
              labels={"index": "Secteur", "Secteur": "Nombre"})
st.plotly_chart(fig3, use_container_width=True)

# --- Tableau brut ---
with st.expander("üìÑ Voir les donn√©es sources"):
    st.dataframe(df_filtered)

# --- Footer ---
st.markdown("---")
st.markdown("D√©mo r√©alis√©e dans le cadre d'une candidature spontan√©e chez SGS Cameroun. Donn√©es simul√©es.")