# -*- coding: utf-8 -*-
"""sgs_inspector

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrqSCd5Qa48aLF_e_SfKfeeUg-TX4mFx
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import random

# Configuration
st.set_page_config(page_title="SGS Inspector Dashboard", layout="wide")

st.title("📊 Tableau de bord - Inspections SGS (Données simulées)")
st.markdown("Ce tableau de bord présente une visualisation fictive de l'activité d'inspection. Les données sont simulées à des fins de démonstration.")

# --- Génération de données simulées ---
@st.cache_data
def generate_data():
    random.seed(42)
    clients = ["Total", "Brasseries", "Sodecoton", "Sonara", "Dangote", "PMUC"]
    regions = ["Littoral", "Centre", "Nord", "Ouest", "Sud-Ouest"]
    secteurs = ["Agroalimentaire", "Pétrole", "Transport", "Pharma", "Construction"]

    data = []
    for _ in range(500):
        date = datetime.now() - timedelta(days=random.randint(1, 365))
        client = random.choice(clients)
        region = random.choice(regions)
        secteur = random.choice(secteurs)
        conformite = random.choices(["Conforme", "Non conforme"], weights=[0.8, 0.2])[0]
        duree = round(random.uniform(1, 5), 2)
        data.append([date, client, region, secteur, conformite, duree])

    df = pd.DataFrame(data, columns=["Date", "Client", "Région", "Secteur", "Statut conformité", "Durée (jours)"])
    df["Mois"] = df["Date"].dt.to_period("M").astype(str)
    return df

df = generate_data()

# --- Filtres dynamiques ---
with st.sidebar:
    st.header("🔘 Filtres dynamiques")
    use_filters = st.checkbox("Activer les filtres")

    if use_filters:
        selected_regions = st.multiselect("Choisir une ou plusieurs régions", df["Région"].unique())
        selected_secteurs = st.multiselect("Choisir les secteurs", df["Secteur"].unique())
        selected_statuts = st.multiselect("Statut de conformité", df["Statut conformité"].unique())

        apply_filters = st.button("✅ Appliquer les filtres")
    else:
        apply_filters = False

# --- Application conditionnelle des filtres ---
if use_filters and apply_filters:
    df_filtered = df.copy()

    if selected_regions:
        df_filtered = df_filtered[df_filtered["Région"].isin(selected_regions)]
    if selected_secteurs:
        df_filtered = df_filtered[df_filtered["Secteur"].isin(selected_secteurs)]
    if selected_statuts:
        df_filtered = df_filtered[df_filtered["Statut conformité"].isin(selected_statuts)]

    st.success(f"🎯 Filtres appliqués sur {len(df_filtered)} inspections")
else:
    df_filtered = df.copy()

# --- Affichage si données disponibles ---
if len(df_filtered) == 0:
    st.warning("Aucune donnée ne correspond aux filtres sélectionnés.")
else:
    # --- KPI ---
    col1, col2, col3 = st.columns(3)
    col1.metric("📦 Nombre d'inspections", len(df_filtered))
    conform_rate = df_filtered["Statut conformité"].value_counts(normalize=True).get("Conforme", 0)
    col2.metric("✅ Taux de conformité", f"{conform_rate*100:.1f}%")
    col3.metric("⏱️ Durée moyenne (jours)", f"{df_filtered['Durée (jours)'].mean():.2f}")

    # --- Graphiques ---
    st.subheader("📈 Évolution mensuelle des inspections")
    fig1 = px.histogram(df_filtered, x="Mois", color="Statut conformité", barmode="group")
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("📍 Répartition par région")
    fig2 = px.pie(df_filtered, names="Région", title="Répartition par région")
    st.plotly_chart(fig2, use_container_width=True)

    st.subheader("🔍 Répartition par secteur")
    fig3 = px.bar(
    secteur_counts,
    x="Secteur", y="Nombre",
    title="Nombre d'inspections par secteur",
    labels={"Secteur": "Secteur", "Nombre": "Nombre"}
)
    st.plotly_chart(fig3, use_container_width=True)

    # --- Tableau brut ---
    with st.expander("📄 Voir les données sources"):
        st.dataframe(df_filtered)

# --- Footer ---
st.markdown("---")
st.markdown("🔧 Démo réalisée dans le cadre d'une candidature spontanée chez **SGS Cameroun**. Données simulées.")